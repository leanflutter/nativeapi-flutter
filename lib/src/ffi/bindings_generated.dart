// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/nativeapi.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class NativeApiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeApiBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeApiBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  NativeDisplayList display_manager_get_all() {
    return _display_manager_get_all();
  }

  late final _display_manager_get_allPtr =
      _lookup<ffi.NativeFunction<NativeDisplayList Function()>>(
          'display_manager_get_all');
  late final _display_manager_get_all =
      _display_manager_get_allPtr.asFunction<NativeDisplayList Function()>();

  NativeDisplay display_manager_get_primary() {
    return _display_manager_get_primary();
  }

  late final _display_manager_get_primaryPtr =
      _lookup<ffi.NativeFunction<NativeDisplay Function()>>(
          'display_manager_get_primary');
  late final _display_manager_get_primary =
      _display_manager_get_primaryPtr.asFunction<NativeDisplay Function()>();

  NativePoint display_manager_get_cursor_position() {
    return _display_manager_get_cursor_position();
  }

  late final _display_manager_get_cursor_positionPtr =
      _lookup<ffi.NativeFunction<NativePoint Function()>>(
          'display_manager_get_cursor_position');
  late final _display_manager_get_cursor_position =
      _display_manager_get_cursor_positionPtr
          .asFunction<NativePoint Function()>();

  void display_manager_start_listening() {
    return _display_manager_start_listening();
  }

  late final _display_manager_start_listeningPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'display_manager_start_listening');
  late final _display_manager_start_listening =
      _display_manager_start_listeningPtr.asFunction<void Function()>();

  void display_manager_stop_listening() {
    return _display_manager_stop_listening();
  }

  late final _display_manager_stop_listeningPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'display_manager_stop_listening');
  late final _display_manager_stop_listening =
      _display_manager_stop_listeningPtr.asFunction<void Function()>();

  void display_manager_on_display_added(
    DisplayAddedCallback callback,
  ) {
    return _display_manager_on_display_added(
      callback,
    );
  }

  late final _display_manager_on_display_addedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DisplayAddedCallback)>>(
          'display_manager_on_display_added');
  late final _display_manager_on_display_added =
      _display_manager_on_display_addedPtr
          .asFunction<void Function(DisplayAddedCallback)>();

  void display_manager_on_display_removed(
    DisplayRemovedCallback callback,
  ) {
    return _display_manager_on_display_removed(
      callback,
    );
  }

  late final _display_manager_on_display_removedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DisplayRemovedCallback)>>(
          'display_manager_on_display_removed');
  late final _display_manager_on_display_removed =
      _display_manager_on_display_removedPtr
          .asFunction<void Function(DisplayRemovedCallback)>();

  /// A very short-lived native function.
  ///
  /// For very short-lived functions, it is fine to call them on the main isolate.
  /// They will block the Dart execution while running the native function, so
  /// only do this for native functions which are guaranteed to be short-lived.
  int sum(
    int a,
    int b,
  ) {
    return _sum(
      a,
      b,
    );
  }

  late final _sumPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('sum');
  late final _sum = _sumPtr.asFunction<int Function(int, int)>();

  /// A longer lived native function, which occupies the thread calling it.
  ///
  /// Do not call these kind of native functions in the main isolate. They will
  /// block Dart execution. This will cause dropped frames in Flutter applications.
  /// Instead, call these native functions on a separate isolate.
  int sum_long_running(
    int a,
    int b,
  ) {
    return _sum_long_running(
      a,
      b,
    );
  }

  late final _sum_long_runningPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'sum_long_running');
  late final _sum_long_running =
      _sum_long_runningPtr.asFunction<int Function(int, int)>();

  int tray_manager_create() {
    return _tray_manager_create();
  }

  late final _tray_manager_createPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('tray_manager_create');
  late final _tray_manager_create =
      _tray_manager_createPtr.asFunction<int Function()>();

  NativeTrayIDList tray_manager_get_all() {
    return _tray_manager_get_all();
  }

  late final _tray_manager_get_allPtr =
      _lookup<ffi.NativeFunction<NativeTrayIDList Function()>>(
          'tray_manager_get_all');
  late final _tray_manager_get_all =
      _tray_manager_get_allPtr.asFunction<NativeTrayIDList Function()>();

  void tray_manager_start_listening() {
    return _tray_manager_start_listening();
  }

  late final _tray_manager_start_listeningPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'tray_manager_start_listening');
  late final _tray_manager_start_listening =
      _tray_manager_start_listeningPtr.asFunction<void Function()>();

  void tray_manager_stop_listening() {
    return _tray_manager_stop_listening();
  }

  late final _tray_manager_stop_listeningPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'tray_manager_stop_listening');
  late final _tray_manager_stop_listening =
      _tray_manager_stop_listeningPtr.asFunction<void Function()>();

  void tray_set_icon(
    int tray_id,
    ffi.Pointer<ffi.Char> icon,
  ) {
    return _tray_set_icon(
      tray_id,
      icon,
    );
  }

  late final _tray_set_iconPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Long, ffi.Pointer<ffi.Char>)>>('tray_set_icon');
  late final _tray_set_icon =
      _tray_set_iconPtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  void tray_set_title(
    int tray_id,
    ffi.Pointer<ffi.Char> title,
  ) {
    return _tray_set_title(
      tray_id,
      title,
    );
  }

  late final _tray_set_titlePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Long, ffi.Pointer<ffi.Char>)>>(
      'tray_set_title');
  late final _tray_set_title = _tray_set_titlePtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tray_get_title(
    int tray_id,
  ) {
    return _tray_get_title(
      tray_id,
    );
  }

  late final _tray_get_titlePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'tray_get_title');
  late final _tray_get_title =
      _tray_get_titlePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void tray_set_tooltip(
    int tray_id,
    ffi.Pointer<ffi.Char> tooltip,
  ) {
    return _tray_set_tooltip(
      tray_id,
      tooltip,
    );
  }

  late final _tray_set_tooltipPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Long, ffi.Pointer<ffi.Char>)>>(
      'tray_set_tooltip');
  late final _tray_set_tooltip = _tray_set_tooltipPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tray_get_tooltip(
    int tray_id,
  ) {
    return _tray_get_tooltip(
      tray_id,
    );
  }

  late final _tray_get_tooltipPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'tray_get_tooltip');
  late final _tray_get_tooltip =
      _tray_get_tooltipPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void tray_start_listening(
    int tray_id,
  ) {
    return _tray_start_listening(
      tray_id,
    );
  }

  late final _tray_start_listeningPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>(
          'tray_start_listening');
  late final _tray_start_listening =
      _tray_start_listeningPtr.asFunction<void Function(int)>();

  void tray_stop_listening(
    int tray_id,
  ) {
    return _tray_stop_listening(
      tray_id,
    );
  }

  late final _tray_stop_listeningPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>(
          'tray_stop_listening');
  late final _tray_stop_listening =
      _tray_stop_listeningPtr.asFunction<void Function(int)>();

  NativeWindowIDList window_manager_get_all() {
    return _window_manager_get_all();
  }

  late final _window_manager_get_allPtr =
      _lookup<ffi.NativeFunction<NativeWindowIDList Function()>>(
          'window_manager_get_all');
  late final _window_manager_get_all =
      _window_manager_get_allPtr.asFunction<NativeWindowIDList Function()>();

  int window_manager_get_current() {
    return _window_manager_get_current();
  }

  late final _window_manager_get_currentPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>(
          'window_manager_get_current');
  late final _window_manager_get_current =
      _window_manager_get_currentPtr.asFunction<int Function()>();

  void window_manager_start_listening() {
    return _window_manager_start_listening();
  }

  late final _window_manager_start_listeningPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'window_manager_start_listening');
  late final _window_manager_start_listening =
      _window_manager_start_listeningPtr.asFunction<void Function()>();

  void window_manager_stop_listening() {
    return _window_manager_stop_listening();
  }

  late final _window_manager_stop_listeningPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'window_manager_stop_listening');
  late final _window_manager_stop_listening =
      _window_manager_stop_listeningPtr.asFunction<void Function()>();

  void window_focus(
    int window_id,
  ) {
    return _window_focus(
      window_id,
    );
  }

  late final _window_focusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('window_focus');
  late final _window_focus = _window_focusPtr.asFunction<void Function(int)>();

  void window_blur(
    int window_id,
  ) {
    return _window_blur(
      window_id,
    );
  }

  late final _window_blurPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('window_blur');
  late final _window_blur = _window_blurPtr.asFunction<void Function(int)>();

  bool window_is_focused(
    int window_id,
  ) {
    return _window_is_focused(
      window_id,
    );
  }

  late final _window_is_focusedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Long)>>(
          'window_is_focused');
  late final _window_is_focused =
      _window_is_focusedPtr.asFunction<bool Function(int)>();

  void window_show(
    int window_id,
  ) {
    return _window_show(
      window_id,
    );
  }

  late final _window_showPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('window_show');
  late final _window_show = _window_showPtr.asFunction<void Function(int)>();

  void window_hide(
    int window_id,
  ) {
    return _window_hide(
      window_id,
    );
  }

  late final _window_hidePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('window_hide');
  late final _window_hide = _window_hidePtr.asFunction<void Function(int)>();

  bool window_is_visible(
    int window_id,
  ) {
    return _window_is_visible(
      window_id,
    );
  }

  late final _window_is_visiblePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Long)>>(
          'window_is_visible');
  late final _window_is_visible =
      _window_is_visiblePtr.asFunction<bool Function(int)>();

  void window_maximize(
    int window_id,
  ) {
    return _window_maximize(
      window_id,
    );
  }

  late final _window_maximizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>(
          'window_maximize');
  late final _window_maximize =
      _window_maximizePtr.asFunction<void Function(int)>();

  void window_unmaximize(
    int window_id,
  ) {
    return _window_unmaximize(
      window_id,
    );
  }

  late final _window_unmaximizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>(
          'window_unmaximize');
  late final _window_unmaximize =
      _window_unmaximizePtr.asFunction<void Function(int)>();

  bool window_is_maximized(
    int window_id,
  ) {
    return _window_is_maximized(
      window_id,
    );
  }

  late final _window_is_maximizedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Long)>>(
          'window_is_maximized');
  late final _window_is_maximized =
      _window_is_maximizedPtr.asFunction<bool Function(int)>();

  void window_minimize(
    int window_id,
  ) {
    return _window_minimize(
      window_id,
    );
  }

  late final _window_minimizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>(
          'window_minimize');
  late final _window_minimize =
      _window_minimizePtr.asFunction<void Function(int)>();

  void window_restore(
    int window_id,
  ) {
    return _window_restore(
      window_id,
    );
  }

  late final _window_restorePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>(
          'window_restore');
  late final _window_restore =
      _window_restorePtr.asFunction<void Function(int)>();

  bool window_is_minimized(
    int window_id,
  ) {
    return _window_is_minimized(
      window_id,
    );
  }

  late final _window_is_minimizedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Long)>>(
          'window_is_minimized');
  late final _window_is_minimized =
      _window_is_minimizedPtr.asFunction<bool Function(int)>();

  void window_set_full_screen(
    int window_id,
    bool is_full_screen,
  ) {
    return _window_set_full_screen(
      window_id,
      is_full_screen,
    );
  }

  late final _window_set_full_screenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long, ffi.Bool)>>(
          'window_set_full_screen');
  late final _window_set_full_screen =
      _window_set_full_screenPtr.asFunction<void Function(int, bool)>();

  bool window_is_full_screen(
    int window_id,
  ) {
    return _window_is_full_screen(
      window_id,
    );
  }

  late final _window_is_full_screenPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Long)>>(
          'window_is_full_screen');
  late final _window_is_full_screen =
      _window_is_full_screenPtr.asFunction<bool Function(int)>();

  /// FFI_PLUGIN_EXPORT
  /// NativeColor window_get_background_color(long window_id);
  void window_set_bounds(
    int window_id,
    NativeRectangle bounds,
  ) {
    return _window_set_bounds(
      window_id,
      bounds,
    );
  }

  late final _window_set_boundsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long, NativeRectangle)>>(
          'window_set_bounds');
  late final _window_set_bounds =
      _window_set_boundsPtr.asFunction<void Function(int, NativeRectangle)>();

  NativeRectangle window_get_bounds(
    int window_id,
  ) {
    return _window_get_bounds(
      window_id,
    );
  }

  late final _window_get_boundsPtr =
      _lookup<ffi.NativeFunction<NativeRectangle Function(ffi.Long)>>(
          'window_get_bounds');
  late final _window_get_bounds =
      _window_get_boundsPtr.asFunction<NativeRectangle Function(int)>();

  void window_set_size(
    int window_id,
    NativeSize size,
  ) {
    return _window_set_size(
      window_id,
      size,
    );
  }

  late final _window_set_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long, NativeSize)>>(
          'window_set_size');
  late final _window_set_size =
      _window_set_sizePtr.asFunction<void Function(int, NativeSize)>();

  NativeSize window_get_size(
    int window_id,
  ) {
    return _window_get_size(
      window_id,
    );
  }

  late final _window_get_sizePtr =
      _lookup<ffi.NativeFunction<NativeSize Function(ffi.Long)>>(
          'window_get_size');
  late final _window_get_size =
      _window_get_sizePtr.asFunction<NativeSize Function(int)>();

  void window_set_content_size(
    int window_id,
    NativeSize size,
  ) {
    return _window_set_content_size(
      window_id,
      size,
    );
  }

  late final _window_set_content_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long, NativeSize)>>(
          'window_set_content_size');
  late final _window_set_content_size =
      _window_set_content_sizePtr.asFunction<void Function(int, NativeSize)>();

  NativeSize window_get_content_size(
    int window_id,
  ) {
    return _window_get_content_size(
      window_id,
    );
  }

  late final _window_get_content_sizePtr =
      _lookup<ffi.NativeFunction<NativeSize Function(ffi.Long)>>(
          'window_get_content_size');
  late final _window_get_content_size =
      _window_get_content_sizePtr.asFunction<NativeSize Function(int)>();

  void window_set_minimum_size(
    int window_id,
    NativeSize size,
  ) {
    return _window_set_minimum_size(
      window_id,
      size,
    );
  }

  late final _window_set_minimum_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long, NativeSize)>>(
          'window_set_minimum_size');
  late final _window_set_minimum_size =
      _window_set_minimum_sizePtr.asFunction<void Function(int, NativeSize)>();

  NativeSize window_get_minimum_size(
    int window_id,
  ) {
    return _window_get_minimum_size(
      window_id,
    );
  }

  late final _window_get_minimum_sizePtr =
      _lookup<ffi.NativeFunction<NativeSize Function(ffi.Long)>>(
          'window_get_minimum_size');
  late final _window_get_minimum_size =
      _window_get_minimum_sizePtr.asFunction<NativeSize Function(int)>();

  void window_set_maximum_size(
    int window_id,
    NativeSize size,
  ) {
    return _window_set_maximum_size(
      window_id,
      size,
    );
  }

  late final _window_set_maximum_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long, NativeSize)>>(
          'window_set_maximum_size');
  late final _window_set_maximum_size =
      _window_set_maximum_sizePtr.asFunction<void Function(int, NativeSize)>();

  NativeSize window_get_maximum_size(
    int window_id,
  ) {
    return _window_get_maximum_size(
      window_id,
    );
  }

  late final _window_get_maximum_sizePtr =
      _lookup<ffi.NativeFunction<NativeSize Function(ffi.Long)>>(
          'window_get_maximum_size');
  late final _window_get_maximum_size =
      _window_get_maximum_sizePtr.asFunction<NativeSize Function(int)>();

  void window_set_resizable(
    int window_id,
    bool is_resizable,
  ) {
    return _window_set_resizable(
      window_id,
      is_resizable,
    );
  }

  late final _window_set_resizablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long, ffi.Bool)>>(
          'window_set_resizable');
  late final _window_set_resizable =
      _window_set_resizablePtr.asFunction<void Function(int, bool)>();

  bool window_is_resizable(
    int window_id,
  ) {
    return _window_is_resizable(
      window_id,
    );
  }

  late final _window_is_resizablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Long)>>(
          'window_is_resizable');
  late final _window_is_resizable =
      _window_is_resizablePtr.asFunction<bool Function(int)>();

  void window_set_movable(
    int window_id,
    bool is_movable,
  ) {
    return _window_set_movable(
      window_id,
      is_movable,
    );
  }

  late final _window_set_movablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long, ffi.Bool)>>(
          'window_set_movable');
  late final _window_set_movable =
      _window_set_movablePtr.asFunction<void Function(int, bool)>();

  bool window_is_movable(
    int window_id,
  ) {
    return _window_is_movable(
      window_id,
    );
  }

  late final _window_is_movablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Long)>>(
          'window_is_movable');
  late final _window_is_movable =
      _window_is_movablePtr.asFunction<bool Function(int)>();

  void window_set_minimizable(
    int window_id,
    bool is_minimizable,
  ) {
    return _window_set_minimizable(
      window_id,
      is_minimizable,
    );
  }

  late final _window_set_minimizablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long, ffi.Bool)>>(
          'window_set_minimizable');
  late final _window_set_minimizable =
      _window_set_minimizablePtr.asFunction<void Function(int, bool)>();

  bool window_is_minimizable(
    int window_id,
  ) {
    return _window_is_minimizable(
      window_id,
    );
  }

  late final _window_is_minimizablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Long)>>(
          'window_is_minimizable');
  late final _window_is_minimizable =
      _window_is_minimizablePtr.asFunction<bool Function(int)>();

  void window_set_maximizable(
    int window_id,
    bool is_maximizable,
  ) {
    return _window_set_maximizable(
      window_id,
      is_maximizable,
    );
  }

  late final _window_set_maximizablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long, ffi.Bool)>>(
          'window_set_maximizable');
  late final _window_set_maximizable =
      _window_set_maximizablePtr.asFunction<void Function(int, bool)>();

  bool window_is_maximizable(
    int window_id,
  ) {
    return _window_is_maximizable(
      window_id,
    );
  }

  late final _window_is_maximizablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Long)>>(
          'window_is_maximizable');
  late final _window_is_maximizable =
      _window_is_maximizablePtr.asFunction<bool Function(int)>();

  void window_set_full_screenable(
    int window_id,
    bool is_full_screenable,
  ) {
    return _window_set_full_screenable(
      window_id,
      is_full_screenable,
    );
  }

  late final _window_set_full_screenablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long, ffi.Bool)>>(
          'window_set_full_screenable');
  late final _window_set_full_screenable =
      _window_set_full_screenablePtr.asFunction<void Function(int, bool)>();

  bool window_is_full_screenable(
    int window_id,
  ) {
    return _window_is_full_screenable(
      window_id,
    );
  }

  late final _window_is_full_screenablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Long)>>(
          'window_is_full_screenable');
  late final _window_is_full_screenable =
      _window_is_full_screenablePtr.asFunction<bool Function(int)>();

  void window_set_closable(
    int window_id,
    bool is_closable,
  ) {
    return _window_set_closable(
      window_id,
      is_closable,
    );
  }

  late final _window_set_closablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long, ffi.Bool)>>(
          'window_set_closable');
  late final _window_set_closable =
      _window_set_closablePtr.asFunction<void Function(int, bool)>();

  bool window_is_closable(
    int window_id,
  ) {
    return _window_is_closable(
      window_id,
    );
  }

  late final _window_is_closablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Long)>>(
          'window_is_closable');
  late final _window_is_closable =
      _window_is_closablePtr.asFunction<bool Function(int)>();

  void window_set_always_on_top(
    int window_id,
    bool is_always_on_top,
  ) {
    return _window_set_always_on_top(
      window_id,
      is_always_on_top,
    );
  }

  late final _window_set_always_on_topPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long, ffi.Bool)>>(
          'window_set_always_on_top');
  late final _window_set_always_on_top =
      _window_set_always_on_topPtr.asFunction<void Function(int, bool)>();

  bool window_is_always_on_top(
    int window_id,
  ) {
    return _window_is_always_on_top(
      window_id,
    );
  }

  late final _window_is_always_on_topPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Long)>>(
          'window_is_always_on_top');
  late final _window_is_always_on_top =
      _window_is_always_on_topPtr.asFunction<bool Function(int)>();

  void window_set_position(
    int window_id,
    NativePoint point,
  ) {
    return _window_set_position(
      window_id,
      point,
    );
  }

  late final _window_set_positionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long, NativePoint)>>(
          'window_set_position');
  late final _window_set_position =
      _window_set_positionPtr.asFunction<void Function(int, NativePoint)>();

  NativePoint window_get_position(
    int window_id,
  ) {
    return _window_get_position(
      window_id,
    );
  }

  late final _window_get_positionPtr =
      _lookup<ffi.NativeFunction<NativePoint Function(ffi.Long)>>(
          'window_get_position');
  late final _window_get_position =
      _window_get_positionPtr.asFunction<NativePoint Function(int)>();

  void window_set_title(
    int window_id,
    ffi.Pointer<ffi.Char> title,
  ) {
    return _window_set_title(
      window_id,
      title,
    );
  }

  late final _window_set_titlePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Long, ffi.Pointer<ffi.Char>)>>(
      'window_set_title');
  late final _window_set_title = _window_set_titlePtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> window_get_title(
    int window_id,
  ) {
    return _window_get_title(
      window_id,
    );
  }

  late final _window_get_titlePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'window_get_title');
  late final _window_get_title =
      _window_get_titlePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void window_set_has_shadow(
    int window_id,
    bool has_shadow,
  ) {
    return _window_set_has_shadow(
      window_id,
      has_shadow,
    );
  }

  late final _window_set_has_shadowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long, ffi.Bool)>>(
          'window_set_has_shadow');
  late final _window_set_has_shadow =
      _window_set_has_shadowPtr.asFunction<void Function(int, bool)>();

  bool window_has_shadow(
    int window_id,
  ) {
    return _window_has_shadow(
      window_id,
    );
  }

  late final _window_has_shadowPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Long)>>(
          'window_has_shadow');
  late final _window_has_shadow =
      _window_has_shadowPtr.asFunction<bool Function(int)>();

  void window_set_opacity(
    int window_id,
    double opacity,
  ) {
    return _window_set_opacity(
      window_id,
      opacity,
    );
  }

  late final _window_set_opacityPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long, ffi.Float)>>(
          'window_set_opacity');
  late final _window_set_opacity =
      _window_set_opacityPtr.asFunction<void Function(int, double)>();

  double window_get_opacity(
    int window_id,
  ) {
    return _window_get_opacity(
      window_id,
    );
  }

  late final _window_get_opacityPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Long)>>(
          'window_get_opacity');
  late final _window_get_opacity =
      _window_get_opacityPtr.asFunction<double Function(int)>();

  void window_set_focusable(
    int window_id,
    bool is_focusable,
  ) {
    return _window_set_focusable(
      window_id,
      is_focusable,
    );
  }

  late final _window_set_focusablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long, ffi.Bool)>>(
          'window_set_focusable');
  late final _window_set_focusable =
      _window_set_focusablePtr.asFunction<void Function(int, bool)>();

  bool window_is_focusable(
    int window_id,
  ) {
    return _window_is_focusable(
      window_id,
    );
  }

  late final _window_is_focusablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Long)>>(
          'window_is_focusable');
  late final _window_is_focusable =
      _window_is_focusablePtr.asFunction<bool Function(int)>();

  void window_start_dragging(
    int window_id,
  ) {
    return _window_start_dragging(
      window_id,
    );
  }

  late final _window_start_draggingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>(
          'window_start_dragging');
  late final _window_start_dragging =
      _window_start_draggingPtr.asFunction<void Function(int)>();

  void window_start_resizing(
    int window_id,
  ) {
    return _window_start_resizing(
      window_id,
    );
  }

  late final _window_start_resizingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>(
          'window_start_resizing');
  late final _window_start_resizing =
      _window_start_resizingPtr.asFunction<void Function(int)>();

  void window_start_listening(
    int window_id,
  ) {
    return _window_start_listening(
      window_id,
    );
  }

  late final _window_start_listeningPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>(
          'window_start_listening');
  late final _window_start_listening =
      _window_start_listeningPtr.asFunction<void Function(int)>();

  void window_stop_listening(
    int window_id,
  ) {
    return _window_stop_listening(
      window_id,
    );
  }

  late final _window_stop_listeningPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>(
          'window_stop_listening');
  late final _window_stop_listening =
      _window_stop_listeningPtr.asFunction<void Function(int)>();
}

final class NativeDisplay extends ffi.Struct {
  external ffi.Pointer<ffi.Char> id;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;

  @ffi.Double()
  external double visiblePositionX;

  @ffi.Double()
  external double visiblePositionY;

  @ffi.Double()
  external double visibleSizeWidth;

  @ffi.Double()
  external double visibleSizeHeight;

  @ffi.Double()
  external double scaleFactor;
}

final class NativeDisplayList extends ffi.Struct {
  external ffi.Pointer<NativeDisplay> displays;

  @ffi.Long()
  external int count;
}

final class NativePoint extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

typedef DisplayAddedCallback
    = ffi.Pointer<ffi.NativeFunction<DisplayAddedCallbackFunction>>;
typedef DisplayAddedCallbackFunction = ffi.Void Function(NativeDisplay display);
typedef DartDisplayAddedCallbackFunction = void Function(NativeDisplay display);
typedef DisplayRemovedCallback
    = ffi.Pointer<ffi.NativeFunction<DisplayRemovedCallbackFunction>>;
typedef DisplayRemovedCallbackFunction = ffi.Void Function(
    NativeDisplay display);
typedef DartDisplayRemovedCallbackFunction = void Function(
    NativeDisplay display);

final class NativeRectangle extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;

  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;
}

final class NativeSize extends ffi.Struct {
  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;
}

final class NativeTrayIDList extends ffi.Struct {
  external ffi.Pointer<ffi.Long> ids;

  @ffi.Long()
  external int count;
}

final class NativeWindowIDList extends ffi.Struct {
  external ffi.Pointer<ffi.Long> ids;

  @ffi.Long()
  external int count;
}
