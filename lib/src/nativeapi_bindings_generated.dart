// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/nativeapi.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class NativeApiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeApiBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeApiBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void register_event_callback(
    EventCallback callback,
  ) {
    return _register_event_callback(
      callback,
    );
  }

  late final _register_event_callbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(EventCallback)>>(
          'register_event_callback');
  late final _register_event_callback =
      _register_event_callbackPtr.asFunction<void Function(EventCallback)>();

  void start_event_loop() {
    return _start_event_loop();
  }

  late final _start_event_loopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('start_event_loop');
  late final _start_event_loop =
      _start_event_loopPtr.asFunction<void Function()>();

  /// A very short-lived native function.
  ///
  /// For very short-lived functions, it is fine to call them on the main isolate.
  /// They will block the Dart execution while running the native function, so
  /// only do this for native functions which are guaranteed to be short-lived.
  int sum(
    int a,
    int b,
  ) {
    return _sum(
      a,
      b,
    );
  }

  late final _sumPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('sum');
  late final _sum = _sumPtr.asFunction<int Function(int, int)>();

  /// A longer lived native function, which occupies the thread calling it.
  ///
  /// Do not call these kind of native functions in the main isolate. They will
  /// block Dart execution. This will cause dropped frames in Flutter applications.
  /// Instead, call these native functions on a separate isolate.
  int sum_long_running(
    int a,
    int b,
  ) {
    return _sum_long_running(
      a,
      b,
    );
  }

  late final _sum_long_runningPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'sum_long_running');
  late final _sum_long_running =
      _sum_long_runningPtr.asFunction<int Function(int, int)>();

  /// Get primary display
  NativeDisplay get_primary_display() {
    return _get_primary_display();
  }

  late final _get_primary_displayPtr =
      _lookup<ffi.NativeFunction<NativeDisplay Function()>>(
          'get_primary_display');
  late final _get_primary_display =
      _get_primary_displayPtr.asFunction<NativeDisplay Function()>();

  /// Get all displays
  NativeDisplayList get_all_displays() {
    return _get_all_displays();
  }

  late final _get_all_displaysPtr =
      _lookup<ffi.NativeFunction<NativeDisplayList Function()>>(
          'get_all_displays');
  late final _get_all_displays =
      _get_all_displaysPtr.asFunction<NativeDisplayList Function()>();

  /// Get the current cursor position
  NativePoint get_cursor_screen_point() {
    return _get_cursor_screen_point();
  }

  late final _get_cursor_screen_pointPtr =
      _lookup<ffi.NativeFunction<NativePoint Function()>>(
          'get_cursor_screen_point');
  late final _get_cursor_screen_point =
      _get_cursor_screen_pointPtr.asFunction<NativePoint Function()>();
}

/// Representation of a display
final class NativeDisplay extends ffi.Struct {
  external ffi.Pointer<ffi.Char> id;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;

  @ffi.Double()
  external double visiblePositionX;

  @ffi.Double()
  external double visiblePositionY;

  @ffi.Double()
  external double visibleSizeWidth;

  @ffi.Double()
  external double visibleSizeHeight;

  @ffi.Double()
  external double scaleFactor;
}

/// Representation of a list of displays
final class NativeDisplayList extends ffi.Struct {
  external ffi.Pointer<NativeDisplay> displays;

  @ffi.Int()
  external int count;
}

final class NativePoint extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

typedef EventCallback = ffi.Pointer<ffi.NativeFunction<EventCallbackFunction>>;
typedef EventCallbackFunction = ffi.Void Function(
    ffi.Int eventType, ffi.Pointer<ffi.Char> eventData);
typedef DartEventCallbackFunction = void Function(
    int eventType, ffi.Pointer<ffi.Char> eventData);
