// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/nativeapi.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class NativeApiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeApiBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeApiBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  NativeDisplayList display_manager_get_all() {
    return _display_manager_get_all();
  }

  late final _display_manager_get_allPtr =
      _lookup<ffi.NativeFunction<NativeDisplayList Function()>>(
          'display_manager_get_all');
  late final _display_manager_get_all =
      _display_manager_get_allPtr.asFunction<NativeDisplayList Function()>();

  NativeDisplay display_manager_get_primary() {
    return _display_manager_get_primary();
  }

  late final _display_manager_get_primaryPtr =
      _lookup<ffi.NativeFunction<NativeDisplay Function()>>(
          'display_manager_get_primary');
  late final _display_manager_get_primary =
      _display_manager_get_primaryPtr.asFunction<NativeDisplay Function()>();

  NativePoint display_manager_get_cursor_position() {
    return _display_manager_get_cursor_position();
  }

  late final _display_manager_get_cursor_positionPtr =
      _lookup<ffi.NativeFunction<NativePoint Function()>>(
          'display_manager_get_cursor_position');
  late final _display_manager_get_cursor_position =
      _display_manager_get_cursor_positionPtr
          .asFunction<NativePoint Function()>();

  void display_manager_start_listening() {
    return _display_manager_start_listening();
  }

  late final _display_manager_start_listeningPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'display_manager_start_listening');
  late final _display_manager_start_listening =
      _display_manager_start_listeningPtr.asFunction<void Function()>();

  void display_manager_stop_listening() {
    return _display_manager_stop_listening();
  }

  late final _display_manager_stop_listeningPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'display_manager_stop_listening');
  late final _display_manager_stop_listening =
      _display_manager_stop_listeningPtr.asFunction<void Function()>();

  void display_manager_on_display_added(
    DisplayAddedCallback callback,
  ) {
    return _display_manager_on_display_added(
      callback,
    );
  }

  late final _display_manager_on_display_addedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DisplayAddedCallback)>>(
          'display_manager_on_display_added');
  late final _display_manager_on_display_added =
      _display_manager_on_display_addedPtr
          .asFunction<void Function(DisplayAddedCallback)>();

  void display_manager_on_display_removed(
    DisplayRemovedCallback callback,
  ) {
    return _display_manager_on_display_removed(
      callback,
    );
  }

  late final _display_manager_on_display_removedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DisplayRemovedCallback)>>(
          'display_manager_on_display_removed');
  late final _display_manager_on_display_removed =
      _display_manager_on_display_removedPtr
          .asFunction<void Function(DisplayRemovedCallback)>();

  /// A very short-lived native function.
  ///
  /// For very short-lived functions, it is fine to call them on the main isolate.
  /// They will block the Dart execution while running the native function, so
  /// only do this for native functions which are guaranteed to be short-lived.
  int sum(
    int a,
    int b,
  ) {
    return _sum(
      a,
      b,
    );
  }

  late final _sumPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('sum');
  late final _sum = _sumPtr.asFunction<int Function(int, int)>();

  /// A longer lived native function, which occupies the thread calling it.
  ///
  /// Do not call these kind of native functions in the main isolate. They will
  /// block Dart execution. This will cause dropped frames in Flutter applications.
  /// Instead, call these native functions on a separate isolate.
  int sum_long_running(
    int a,
    int b,
  ) {
    return _sum_long_running(
      a,
      b,
    );
  }

  late final _sum_long_runningPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'sum_long_running');
  late final _sum_long_running =
      _sum_long_runningPtr.asFunction<int Function(int, int)>();

  NativeWindowIDList window_manager_get_all() {
    return _window_manager_get_all();
  }

  late final _window_manager_get_allPtr =
      _lookup<ffi.NativeFunction<NativeWindowIDList Function()>>(
          'window_manager_get_all');
  late final _window_manager_get_all =
      _window_manager_get_allPtr.asFunction<NativeWindowIDList Function()>();

  int window_manager_get_current() {
    return _window_manager_get_current();
  }

  late final _window_manager_get_currentPtr =
      _lookup<ffi.NativeFunction<NativeWindowID Function()>>(
          'window_manager_get_current');
  late final _window_manager_get_current =
      _window_manager_get_currentPtr.asFunction<int Function()>();

  void window_manager_start_listening() {
    return _window_manager_start_listening();
  }

  late final _window_manager_start_listeningPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'window_manager_start_listening');
  late final _window_manager_start_listening =
      _window_manager_start_listeningPtr.asFunction<void Function()>();

  void window_manager_stop_listening() {
    return _window_manager_stop_listening();
  }

  late final _window_manager_stop_listeningPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'window_manager_stop_listening');
  late final _window_manager_stop_listening =
      _window_manager_stop_listeningPtr.asFunction<void Function()>();

  NativeSize window_get_size(
    int id,
  ) {
    return _window_get_size(
      id,
    );
  }

  late final _window_get_sizePtr =
      _lookup<ffi.NativeFunction<NativeSize Function(NativeWindowID)>>(
          'window_get_size');
  late final _window_get_size =
      _window_get_sizePtr.asFunction<NativeSize Function(int)>();

  void window_start_listening() {
    return _window_start_listening();
  }

  late final _window_start_listeningPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'window_start_listening');
  late final _window_start_listening =
      _window_start_listeningPtr.asFunction<void Function()>();

  void window_stop_listening() {
    return _window_stop_listening();
  }

  late final _window_stop_listeningPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('window_stop_listening');
  late final _window_stop_listening =
      _window_stop_listeningPtr.asFunction<void Function()>();
}

final class NativeDisplay extends ffi.Struct {
  external ffi.Pointer<ffi.Char> id;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;

  @ffi.Double()
  external double visiblePositionX;

  @ffi.Double()
  external double visiblePositionY;

  @ffi.Double()
  external double visibleSizeWidth;

  @ffi.Double()
  external double visibleSizeHeight;

  @ffi.Double()
  external double scaleFactor;
}

final class NativeDisplayList extends ffi.Struct {
  external ffi.Pointer<NativeDisplay> displays;

  @ffi.Long()
  external int count;
}

final class NativePoint extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

typedef DisplayAddedCallback
    = ffi.Pointer<ffi.NativeFunction<DisplayAddedCallbackFunction>>;
typedef DisplayAddedCallbackFunction = ffi.Void Function(NativeDisplay display);
typedef DartDisplayAddedCallbackFunction = void Function(NativeDisplay display);
typedef DisplayRemovedCallback
    = ffi.Pointer<ffi.NativeFunction<DisplayRemovedCallbackFunction>>;
typedef DisplayRemovedCallbackFunction = ffi.Void Function(
    NativeDisplay display);
typedef DartDisplayRemovedCallbackFunction = void Function(
    NativeDisplay display);

final class NativeWindowIDList extends ffi.Struct {
  external ffi.Pointer<NativeWindowID> ids;

  @ffi.Long()
  external int count;
}

typedef NativeWindowID = ffi.Int;
typedef DartNativeWindowID = int;

final class NativeSize extends ffi.Struct {
  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;
}
